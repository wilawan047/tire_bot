import os
import sys
import re
from urllib.parse import quote
from werkzeug.utils import secure_filename

import mysql.connector
from flask import (
    Flask,
    request,
    abort,
    jsonify,
    send_from_directory,
    url_for,
)

import config
from make_integration import forward_to_make
from chatpdf_integration import forward_to_chatpdf
from db_queries import (
    get_active_promotions,
    get_all_tire_brands,
    get_tire_models_by_brand_id,
    get_tire_model_by_name,
    get_tires_by_model_id,
    get_tires_by_model_name,
    get_all_service_categories,
    get_services_by_category,
    get_models_by_brand,
    get_tire_model_image,
)
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent,
    TextMessage,
    TextSendMessage,
    QuickReply,
    QuickReplyButton,
    MessageAction,
    FlexSendMessage,
    LocationSendMessage,
    StickerMessage,
    PostbackEvent,
)


LINE_CHANNEL_ACCESS_TOKEN = config.LINE_CHANNEL_ACCESS_TOKEN
LINE_CHANNEL_SECRET = config.LINE_CHANNEL_SECRET

app = Flask(__name__, static_folder="static")
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
BASE_URL = os.getenv("BASE_URL", "http://localhost:5000")


user_pages = {}

# Helper to manage per-user interaction mode
def set_user_mode(user_id, mode):
    if user_id not in user_pages:
        user_pages[user_id] = {}
    user_pages[user_id]["mode"] = mode


@app.route("/api/webhook", methods=["POST"])
def callback():
    body = request.get_data(as_text=True)
    signature = request.headers.get("X-Line-Signature")
    print("üîó WEBHOOK REQUEST RECEIVED!")
    print("Signature:", signature)
    print("Body length:", len(body))
    print("Body preview:", body[:200] + "..." if len(body) > 200 else body)

    if not signature:
        return "Missing signature", 400
    try:
        handler.handle(body, signature)
        print("‚úÖ Handler processed successfully")
    except InvalidSignatureError:
        print("‚ùå Invalid signature")
        return "Invalid signature", 401
    except Exception as e:
        print("‚ùå Handler error:", e)
        return "Error", 500
    return "OK", 200


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
IMAGE_DIR = os.path.join(BASE_DIR, "static", "images2")


# ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô uploads/tires
@app.route("/static/uploads/tires/<path:filename>")
def tires_static(filename):
    tire_dir = os.path.join(BASE_DIR, "static", "uploads", "tires")
    print("Serving tire image:", os.path.join(tire_dir, filename))
    return send_from_directory(tire_dir, filename)


@app.route("/", methods=["GET", "POST"])
def home():
    return "LINE Bot Webhook is running!", 200


def file_exists(filename):
    if not filename:
        return False
    norm = str(filename).replace("\\", "/").lstrip("/")
    # If includes subpath, check under static root; otherwise default to images2
    if "/" in norm:
        return os.path.isfile(os.path.join("static", norm))
    return os.path.isfile(os.path.join("static", "images2", norm))


def get_image_url(filename):
    # ‡πÉ‡∏ä‡πâ BASE_URL ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    base_url = BASE_URL.rstrip("/")
    
    # ‡∏•‡∏ö /app ‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway deployment)
    if base_url.endswith("/app"):
        base_url = base_url[:-4]

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
    if filename and (str(filename).startswith("http://") or str(filename).startswith("https://")):
        return str(filename)

    # Normalize
    norm = (str(filename) if filename else "").replace("\\", "/").lstrip("/")
    if not norm:
        norm = "default-tire.jpg"

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
    if "Michelin_ENERGY_XM2__EXM2.png" in norm:
        norm = "Michelin_ENERGY_XM2_+_EXM2+.png"
        print(f"Debug - Fixed filename: {filename} -> {norm}")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ô production ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)
    from urllib.parse import quote
    if base_url:
        url = f"{base_url}/static/uploads/tires/{quote(norm)}"
    else:
        url = f"/static/uploads/tires/{quote(norm)}"

    # cache-busting ‡∏î‡πâ‡∏ß‡∏¢ timestamp
    import time
    try:
        mtime = int(time.time())
        sep = "&" if "?" in url else "?"
        url = f"{url}{sep}v={mtime}"
    except Exception:
        pass

    print("IMAGE URL ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:", url)
    return url


def build_quick_reply(buttons):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏ï‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤"""
    return QuickReply(
        items=[QuickReplyButton(action=MessageAction(label=label, text=text)) for label, text in buttons]
    )


def build_quick_reply_with_extra(buttons):
    """‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô build_quick_reply ‡πÅ‡∏ï‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° ‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î"""
    extra_button = ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    # ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å text == "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥" ‡∏´‡∏£‡∏∑‡∏≠ label ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å)
    main_menu_idx = None
    for idx, (label, text) in enumerate(buttons):
        if text == "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥" or ("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å" in str(label)):
            main_menu_idx = idx
            break

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    if extra_button in buttons:
        if main_menu_idx is not None:
            # ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏£‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            buttons.remove(extra_button)
            buttons.insert(main_menu_idx, extra_button)
        else:
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å -> ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î
            buttons.remove(extra_button)
        buttons.insert(0, extra_button)
    else:
        # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° -> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î
        if main_menu_idx is not None:
            buttons.insert(main_menu_idx, extra_button)
        else:
            buttons.insert(0, extra_button)

    return build_quick_reply(buttons)


def build_selection_list_flex(title_text, option_labels):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Bubble ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
    - title_text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    - option_labels: list ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° (‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤)
    """
    buttons = []
    for label in option_labels:
        buttons.append({
            "type": "box",
            "layout": "vertical",
            "backgroundColor": "#E9ECF1",
            "cornerRadius": "md",
            "paddingAll": "12px",
            "margin": "md",
            "action": {
                "type": "message",
                "label": label,
                "text": label,
            },
            "contents": [
                {
                    "type": "text",
                    "text": label,
                    "align": "center",
                    "color": "#1F2937",
                    "weight": "bold",
                }
            ],
        })

    bubble = {
        "type": "bubble",
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": title_text,
                    "weight": "bold",
                    "size": "md",
                    "wrap": True,
                },
                {"type": "separator", "margin": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "sm",
                    "contents": buttons,
                },
            ],
        },
    }
    return bubble


def build_tire_flex(tire):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á"""
    image_url = get_image_url(tire.get("tire_image_url"))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    base_url = "https://webtire-production.up.railway.app"
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏à‡∏≤‡∏Å tire object
    brand_name = tire.get('brand_name', '')
    model_name_clean = tire.get('model_name', '')
    
    print(f"Debug - build_tire_flex: brand_name='{brand_name}', model_name='{model_name_clean}'")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö /tires/{brand}?model={model}
    if brand_name and model_name_clean:
        # URL encode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô
        from urllib.parse import quote
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö URL
        brand_lower = brand_name.lower()
        brand_encoded = quote(brand_lower)
        model_encoded = quote(model_name_clean)
        
        # ‡πÉ‡∏ä‡πâ URL format ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏ô build_michelin_model_flex)
        tire_url = f"{base_url}/tires/{brand_encoded}?model={model_encoded}"
        print(f"Debug - Generated specific URL: {tire_url}")
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
        tire_url = f"{base_url}/tires"
        print(f"Debug - Using default URL: {tire_url}")
    
    return {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit",
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": model_name_clean or tire.get('model_name', '') or "Unknown Model",
                    "weight": "bold",
                    "size": "xl",
                    "wrap": True,
                    "color": "#0B4F6C",
                },
                {"type": "separator", "margin": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "md",
                    "spacing": "sm",
                    "contents": [
                        {"type": "text", "text": f"‡∏Ç‡∏ô‡∏≤‡∏î: {tire.get('full_size') or '-'}"},
                        {"type": "text", "text": f"Load Index: {tire.get('load_index') or '-'}"},
                        {"type": "text", "text": f"Speed Symbol: {tire.get('speed_symbol') or '-'}"},
                        {"type": "text", "text": f"Ply Rating: {tire.get('ply_rating') or '-'}"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏™‡πâ‡∏ô: {tire.get('price_each') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏∏‡∏î: {tire.get('price_set') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üî• ‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: {tire.get('promotion_price') or '-'} ‡∏ö‡∏≤‡∏ó"},
                    ],
                },
            ],
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "link",
                    "height": "sm",
                    "action": {
                        "type": "uri",
                        "label": "üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        "uri": tire_url
                    }
                }
            ]
        }
    }


def build_michelin_model_flex():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Michelin ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå"""
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Michelin ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    michelin_models = get_models_by_brand("Michelin")
    
    bubbles = []
    for model in michelin_models:
        model_name = model.get("model_name", "")
        tire_category = model.get("tire_category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
        image_url = get_tire_model_image(model_name)
        
        bubble = {
            "type": "bubble",
            "hero": {
                "type": "image",
                "url": image_url,
                "size": "full",
                "aspectRatio": "4:3",
                "aspectMode": "fit",
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": f"Michelin {model_name}",
                        "weight": "bold",
                        "size": "lg",
                        "wrap": True,
                        "color": "#0B4F6C"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {tire_category}",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
                ],
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "link",
                        "height": "sm",
                        "action": {
                            "type": "postback",
                            "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤",
                            "data": f"model={model_name}"
                        }
                    }
                ]
            }
        }
        bubbles.append(bubble)
    
    return {"type": "carousel", "contents": bubbles}


def build_bfgoodrich_model_flex():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á BFGoodrich ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå"""
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á BFGoodrich ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    bfgoodrich_models = get_models_by_brand("BFGoodrich")
    
    bubbles = []
    for model in bfgoodrich_models:
        model_name = model.get("model_name", "")
        tire_category = model.get("tire_category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
        image_url = get_tire_model_image(model_name)
        
        bubble = {
            "type": "bubble",
            "hero": {
                "type": "image",
                "url": image_url,
                "size": "full",
                "aspectRatio": "4:3",
                "aspectMode": "fit",
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": f"BFGoodrich {model_name}",
                        "weight": "bold",
                        "size": "lg",
                        "wrap": True,
                        "color": "#0B4F6C"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {tire_category}",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
                ],
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "link",
                        "height": "sm",
                        "action": {
                            "type": "postback",
                            "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤",
                            "data": f"model={model_name}"
                        }
                    }
                ]
            }
        }
        bubbles.append(bubble)
    
    return {"type": "carousel", "contents": bubbles}


def build_maxxis_model_flex():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Maxxis ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå"""
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Maxxis ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    maxxis_models = get_models_by_brand("Maxxis")
    
    bubbles = []
    for model in maxxis_models:
        model_name = model.get("model_name", "")
        tire_category = model.get("tire_category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
        image_url = get_tire_model_image(model_name)
        
        bubble = {
            "type": "bubble",
            "hero": {
                "type": "image",
                "url": image_url,
                "size": "full",
                "aspectRatio": "4:3",
                "aspectMode": "fit",
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": f"Maxxis {model_name}",
                        "weight": "bold",
                        "size": "lg",
                        "wrap": True,
                        "color": "#0B4F6C"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {tire_category}",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
                ],
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "link",
                        "height": "sm",
                        "action": {
                            "type": "postback",
                            "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤",
                            "data": f"model={model_name}"
                        }
                    }
                ]
            }
        }
        bubbles.append(bubble)
    
    return {"type": "carousel", "contents": bubbles}


def build_promotion_flex(promo, index=0):
    image_url = get_image_url(promo.get("image_url"))
    if not image_url or "http" not in image_url:
        image_url = "https://placeholder.vercel.app/images/default-promotion.jpg"
    
    # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° description ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    description = promo.get("description", "-")
    if len(description) > 100:
        description = description[:97] + "..."
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏≤‡∏° index
    promotion_links = {
        0: "https://webtire-production.up.railway.app/promotions/13",
        1: "https://webtire-production.up.railway.app/promotions/14",
        2: "https://webtire-production.up.railway.app/promotions/15",
        3: "https://webtire-production.up.railway.app/promotions/16",
        4: "https://webtire-production.up.railway.app/promotions/17",
        5: "https://webtire-production.up.railway.app/promotions/18"
    }
    
    bubble = {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit",
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": promo.get("title", "-"), "weight": "bold", "size": "lg", "wrap": True},
                {"type": "text", "text": description, "size": "sm", "wrap": True, "margin": "md"},
                {"type": "text", "text": f"üìÖ {promo['start_date']} ‡∏ñ‡∏∂‡∏á {promo['end_date']}", "size": "xs", "color": "#888888", "margin": "md"},
            ],
        },
    }
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if index in promotion_links:
        bubble["footer"] = {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "link",
                    "height": "sm",
                    "action": {
                        "type": "uri",
                        "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        "uri": promotion_links[index]
                    }
                }
            ]
        }
    
    return bubble


def build_service_list_flex(category_name, services):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    service_items = []
    for service in services:
        service_contents = [
            {
                "type": "text",
                "text": service.get("service_name", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"),
                "size": "sm",
                "weight": "bold",
                "wrap": True,
            }
        ]

        service_item = {
            "type": "box",
            "layout": "horizontal",
            "margin": "sm",
            "spacing": "sm",
            "contents": [
                {"type": "text", "text": "üîß", "size": "sm", "flex": 0},
                {"type": "box", "layout": "vertical", "flex": 1, "contents": service_contents},
            ],
        }
        service_items.append(service_item)

    return {
        "type": "bubble",
        "size": "giga",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": f"üõ†Ô∏è {category_name.upper()}",
                    "weight": "bold",
                    "size": "lg",
                    "color": "#FFFFFF",
                }
            ],
            "backgroundColor": "#1EC445C5",
            "paddingAll": "md",
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": service_items,
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "link",
                    "action": {
                        "type": "message",
                        "label": "‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                        "text": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                    },
                }
            ],
        },
    }


def get_tire_model_name_by_id(model_id):
    """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ï‡∏≤‡∏° model_id"""
    from db_queries import get_tire_model_name_by_id as db_get_tire_model_name_by_id
    result = db_get_tire_model_name_by_id(model_id)
    if result:
        return result
    else:
        return {"model_id": model_id, "model_name": "Unknown Model", "brand_name": "Unknown Brand", "tire_category": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}


def create_sample_tires_for_model(model_name, brand_name, tire_category):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print(f"Debug - Creating sample tires for {brand_name} {model_name}")
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô
    sample_tires = []
    
    if brand_name.lower() == "michelin":
        if model_name.upper() == "EXM2+":
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ model_id = 1
            sample_tires = [
                {
                    "tire_id": 42,
                    "full_size": "175/70 R13 82T TL",
                    "load_index": "82",
                    "speed_symbol": "T",
                    "ply_rating": None,
                    "price_each": 2750.00,
                    "price_set": 11000.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 43,
                    "full_size": "185/70 R13 86T TL",
                    "load_index": "86",
                    "speed_symbol": "T",
                    "ply_rating": None,
                    "price_each": 2850.00,
                    "price_set": 11400.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 44,
                    "full_size": "165/65 R14 79H TL",
                    "load_index": "79",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 2850.00,
                    "price_set": 11400.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 45,
                    "full_size": "165/70 R14 81T TL",
                    "load_index": "81",
                    "speed_symbol": "T",
                    "ply_rating": None,
                    "price_each": 2950.00,
                    "price_set": 11800.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 46,
                    "full_size": "175/65 R14 82H TL",
                    "load_index": "82",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 2950.00,
                    "price_set": 11800.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 47,
                    "full_size": "175/70 R14 88T XL TL",
                    "load_index": "88",
                    "speed_symbol": "T",
                    "ply_rating": None,
                    "price_each": 3250.00,
                    "price_set": 13000.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 48,
                    "full_size": "185/60 R14 82H TL",
                    "load_index": "82",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 3300.00,
                    "price_set": 13200.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 49,
                    "full_size": "185/65 R14 86H TL",
                    "load_index": "86",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 3100.00,
                    "price_set": 12400.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 50,
                    "full_size": "185/70 R14 88H TL",
                    "load_index": "88",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 3300.00,
                    "price_set": 13200.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 51,
                    "full_size": "195/60 R14 86H TL",
                    "load_index": "86",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 3600.00,
                    "price_set": 14400.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 52,
                    "full_size": "195/70 R14 91H TL",
                    "load_index": "91",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 3650.00,
                    "price_set": 14600.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                }
            ]
        elif model_name.upper() == "ENERGY XM2+":
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ model_id = 2
            sample_tires = [
                {
                    "tire_id": 53,
                    "full_size": "175/65 R15 84H TL",
                    "load_index": "84",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 2650.00,
                    "price_set": 10600.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                },
                {
                    "tire_id": 54,
                    "full_size": "185/60 R15 84H TL",
                    "load_index": "84",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 2650.00,
                    "price_set": 10600.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_ENERGY_XM2_+_EXM2+.png"
                }
            ]
        elif model_name.upper() == "AGILIS3":
            sample_tires = [
                {
                    "tire_id": 9998,
                    "full_size": "195/80 R14 106/104R",
                    "load_index": "106/104",
                    "speed_symbol": "R",
                    "ply_rating": None,
                    "price_each": 2700.00,
                    "price_set": 10800.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_AGILIS_3.png"
                },
                {
                    "tire_id": 9999,
                    "full_size": "205/75 R14C 109/107R TL",
                    "load_index": "109/107",
                    "speed_symbol": "R",
                    "ply_rating": None,
                    "price_each": 3300.00,
                    "price_set": 13200.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_AGILIS_3.png"
                }
            ]
        elif model_name.upper() == "XCD2":
            sample_tires = [
                {
                    "tire_id": 10000,
                    "full_size": "205/75 R14C 109/107P TL PR8",
                    "load_index": "109/107",
                    "speed_symbol": "P",
                    "ply_rating": "PR8",
                    "price_each": 3450.00,
                    "price_set": 13800.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_XCD_2.png"
                },
                {
                    "tire_id": 10001,
                    "full_size": "215/75 R14C 112/110P TL PR8",
                    "load_index": "112/110",
                    "speed_symbol": "P",
                    "ply_rating": "PR8",
                    "price_each": 3850.00,
                    "price_set": 15400.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_XCD_2.png"
                }
            ]
        elif model_name.upper() == "PRIMACRY SUV+":
            sample_tires = [
                {
                    "tire_id": 10002,
                    "full_size": "205/70 R15 96H TL",
                    "load_index": "96",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 4650.00,
                    "price_set": 18600.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_PRIMACRY_SUV+.png"
                },
                {
                    "tire_id": 10003,
                    "full_size": "215/70 R16 100H TL",
                    "load_index": "100",
                    "speed_symbol": "H",
                    "ply_rating": None,
                    "price_each": 5750.00,
                    "price_set": 23000.00,
                    "promotion_price": None,
                    "tire_image_url": "Michelin_PRIMACRY_SUV+.png"
                }
            ]
    
    print(f"Debug - Created {len(sample_tires)} sample tires")
    return sample_tires



def build_promotion_flex(promo, index=0):
    image_url = get_image_url(promo.get("image_url"))
    if not image_url or "http" not in image_url:
        image_url = "https://placeholder.vercel.app/images/default-promotion.jpg"

    # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° description ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    description = promo.get("description", "-")
    if len(description) > 100:
        description = description[:97] + "..."

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏≤‡∏° index
    promotion_links = {
        0: "https://webtire-production.up.railway.app/promotions/13",
        1: "https://webtire-production.up.railway.app/promotions/14", 
        2: "https://webtire-production.up.railway.app/promotions/15",
        3: "https://webtire-production.up.railway.app/promotions/16",
        4: "https://webtire-production.up.railway.app/promotions/17",
        5: "https://webtire-production.up.railway.app/promotions/18"
    }

    bubble = {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit",
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": promo.get("title", "-"), "weight": "bold", "size": "lg", "wrap": True},
                {"type": "text", "text": description, "size": "sm", "wrap": True, "margin": "md"},
                {"type": "text", "text": f"üìÖ {promo['start_date']} ‡∏ñ‡∏∂‡∏á {promo['end_date']}", "size": "xs", "color": "#888888", "margin": "md"},
            ],
        },
    }
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if index in promotion_links:
        bubble["footer"] = {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "link",
                    "height": "sm",
                    "action": {
                        "type": "uri",
                        "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        "uri": promotion_links[index]
                    }
                }
            ]
        }
    
    return bubble


def send_tires_page(reply_token, user_id):
    if user_id not in user_pages:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô"))
        return

    page_size = 8  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà LINE Bot ‡∏à‡∏≥‡∏Å‡∏±‡∏î
    page = user_pages[user_id]["page"]
    model_id = user_pages[user_id]["model_id"]

    tires = get_tires_by_model_id(model_id)
    if not tires:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á"))
        return

    start = (page - 1) * page_size
    end = start + page_size
    tires_page = tires[start:end]

    tire_model = get_tire_model_name_by_id(model_id)
    model_name = tire_model.get("model_name", "Unknown Model")
    
    print(f"Debug - send_tires_page: tire_model={tire_model}")
    print(f"Debug - send_tires_page: model_name={model_name}")

    bubbles = []
    for t in tires_page:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏ô tire object
        t['brand_name'] = tire_model.get("brand_name", "")
        t['model_name'] = tire_model.get("model_name", "")
        print(f"Debug - send_tires_page: tire object after adding model_name: {t}")
        tire_flex = build_tire_flex(t)
        bubbles.append(tire_flex)
    carousel = {"type": "carousel", "contents": bubbles}
    flex_msg = FlexSendMessage(alt_text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤ {page}", contents=carousel)

    nav_buttons = []
    if page > 1:
        nav_buttons.append(("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", f"page_{page - 1}"))
    if end < len(tires):
        nav_buttons.append(("‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è", f"page_{page + 1}"))

    nav_buttons.extend([
        ("‚Ü©Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
        ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    ])

    line_bot_api.reply_message(
        reply_token,
        [
            flex_msg,
            TextSendMessage(
                text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                quick_reply=build_quick_reply_with_extra(nav_buttons),
            ),
        ],
    )


def find_brand_in_text(text):
    text_lower = text.lower()
    brands = get_all_tire_brands()
    for b in brands:
        if b["brand_name"].lower() in text_lower:
            return b
    return None


def find_model_in_text(text):
    text_lower = text.lower()
    all_brands = get_all_tire_brands()
    print(f"Debug - Searching for model: '{text}'")
    
    for b in all_brands:
        models = get_tire_models_by_brand_id(b["brand_id"])
        for m in models:
            model_name_lower = m["model_name"].lower()
            print(f"Debug - Checking model: '{m['model_name']}' against '{text}'")
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            if (model_name_lower in text_lower or 
                text_lower in model_name_lower or
                text_lower.replace('+', '').replace(' ', '') in model_name_lower.replace('+', '').replace(' ', '') or
                model_name_lower.replace('+', '').replace(' ', '') in text_lower.replace('+', '').replace(' ', '')):
                print(f"Debug - Found match: '{m['model_name']}'")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
                m['brand_name'] = b['brand_name']
                return m
    print(f"Debug - No model match found for: '{text}'")
    return None


def find_model_by_alias(text):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
    text_upper = text.upper()
    print(f"Debug - Alias search for: '{text_upper}'")
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
    all_brands = get_all_tire_brands()
    for b in all_brands:
        models = get_tire_models_by_brand_id(b["brand_id"])
        for m in models:
            model_name_upper = m["model_name"].upper()
            print(f"Debug - Checking alias: '{text_upper}' against '{model_name_upper}'")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
            if (text_upper == model_name_upper or
                text_upper in model_name_upper or
                model_name_upper in text_upper or
                text_upper.replace('+', '') == model_name_upper.replace('+', '') or
                text_upper.replace('+', '') in model_name_upper.replace('+', '') or
                model_name_upper.replace('+', '') in text_upper.replace('+', '')):
                print(f"Debug - Found alias match: '{m['model_name']}'")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
                m['brand_name'] = b['brand_name']
                return m
    
    return None


def debug_all_models():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug"""
    print("=== DEBUG: All models in database ===")
    all_brands = get_all_tire_brands()
    for b in all_brands:
        print(f"Brand: {b['brand_name']}")
        models = get_tire_models_by_brand_id(b["brand_id"])
        for m in models:
            print(f"  - Model: '{m['model_name']}'")
    print("=== End debug ===")


def find_promotion_in_text(text):
    text_lower = text.lower()
    promotions = get_active_promotions()
    for p in promotions:
        if p["title"].lower() in text_lower:
            return p
    return None


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    reply_token = event.reply_token
    user_id = event.source.user_id
    mode = user_pages.get(user_id, {}).get("mode", "menu")

    # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    print(f"üìù MESSAGE EVENT RECEIVED!")
    print(f"Received text: '{text}' from user: {user_id}")
    print(f"Text type: {type(text)}, Length: {len(text)}")
    print(f"Event type: {type(event)}")
    print(f"Reply token: {reply_token}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reply_token
    if not reply_token:
        print("‚ùå No reply token available")
        return
    
    # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
    if not hasattr(debug_all_models, '_called'):
        debug_all_models()
        debug_all_models._called = True

    try:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ pagination ‡∏Å‡πà‡∏≠‡∏ô
        if text.startswith("page_"):
            set_user_mode(user_id, "menu")
            try:
                page_num = int(text.split("_")[1])
                print(f"Debug - Page navigation: user_id={user_id}, page={page_num}")
                print(f"Debug - user_pages: {user_pages}")
                
                if user_id in user_pages and "model_id" in user_pages[user_id]:
                    user_pages[user_id]["page"] = page_num
                    print(f"Debug - Updated page to {page_num} for user {user_id}")
                    send_tires_page(reply_token, user_id)
                else:
                    print(f"Debug - User {user_id} not found in user_pages or missing model_id")
                    line_bot_api.reply_message(
                        reply_token,
                        TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞"),
                    )
            except Exception as e:
                print(f"Debug - Error in page navigation: {e}")
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"),
                )
            return
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Quick Reply ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Make)
        if text in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏£‡∏∏‡πà‡∏ô", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"]:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mode ‡πÄ‡∏õ‡πá‡∏ô menu ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Quick Reply
            set_user_mode(user_id, "menu")
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Make integration ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
            pass
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if text == "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô":
            set_user_mode(user_id, "menu")
            promotions = get_active_promotions()
            if not promotions:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡πà‡∏∞"),
                )
            else:
                bubbles = [build_promotion_flex(p, i) for i, p in enumerate(promotions[:10])]
                carousel = {"type": "carousel", "contents": bubbles}
                line_bot_api.reply_message(
                    reply_token,
                    [
                        FlexSendMessage(alt_text="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", contents=carousel),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            return
            
        elif text == "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£":
            set_user_mode(user_id, "menu")
            service_categories = get_all_service_categories()
            if service_categories:
                bubble = build_selection_list_flex("üõ†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", [cat["category"] for cat in service_categories[:12]])
                line_bot_api.reply_message(
                    reply_token, 
                    [
                        FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", contents=bubble),
                        TextSendMessage(
                            text="‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå https://webtire-production.up.railway.app/booking ",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )
            return
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Make)
        elif text == "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°":
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mode ‡πÄ‡∏õ‡πá‡∏ô free_text ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Make
            set_user_mode(user_id, "free_text")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ
            example_questions = [
                "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏Å‡∏£‡∏∞‡∏ö‡∏∞?",
                "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á?",
                "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß?",
                "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô?"
            ]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            example_text = "üí¨ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ö‡πà‡∏≠‡∏¢:\n\n"
            for i, question in enumerate(example_questions, 1):
                example_text += f"{i}. {question}\n"
            
            example_text += ""
            
            line_bot_api.reply_message(
                reply_token,
                [
                    TextSendMessage(text=example_text),
                    TextSendMessage(
                        text="üìù ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞",
                        quick_reply=build_quick_reply([
                            ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                        ])
                    )
                ]
            )
            return
        
        # In free_text mode, forward to Make unless user types a known navigation command
        if mode == "free_text":
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            if text in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"]:
                # ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏ô‡∏π
                set_user_mode(user_id, "menu")
                # ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            elif any(trigger in text for trigger in ["‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏£‡∏∏‡πà‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡πÇ‡∏õ‡∏£", "promotion", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "service"]):
                # ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏ô‡∏π
                set_user_mode(user_id, "menu")
                # ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Make
                try:
                    make_answer = forward_to_make({
                        "replyToken": reply_token,
                        "userId": user_id,
                        "text": text,
                    })
                    if make_answer:
                        try:
                            line_bot_api.reply_message(reply_token, TextSendMessage(text=make_answer))
                        except Exception as reply_err:
                            print(f"‚ùå Failed to send reply: {reply_err}")
                except Exception as make_err:
                    print("‚ùå Make error:", make_err)
                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Make ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                    try:
                        fallback_msg = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà ‚òéÔ∏è 044 611 097"
                        line_bot_api.reply_message(reply_token, TextSendMessage(text=fallback_msg))
                    except Exception as fallback_err:
                        print(f"‚ùå Failed to send fallback message: {fallback_err}")
                return

        if any(word in text.lower() for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"]):
            set_user_mode(user_id, "menu")
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(
                    text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏∞\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞ ",
                    quick_reply=build_quick_reply_with_extra([
                        ("üöó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                        ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                        ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                        ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                        ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                    ]),
                ),
            )

        # --- 3) ‡∏ñ‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
        elif re.search(r"(‡∏°‡∏µ‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô(‡πÑ‡∏´‡∏ô|‡∏≠‡∏∞‡πÑ‡∏£)‡∏ö‡πâ‡∏≤‡∏á|‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á|‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô)", text):
            set_user_mode(user_id, "menu")
            brands = get_all_tire_brands()
            all_models = []
            for b in brands:
                models = get_tire_models_by_brand_id(b["brand_id"])
                if models:
                    all_models.extend([m for m in models])

            if all_models:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                bubbles = []
                for model in all_models[:6]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 6 ‡∏£‡∏∏‡πà‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12 bubbles
                    brand_name = model.get('brand_name', '')
                    model_name = model.get('model_name', '')
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ
                    model_id = model.get("model_id")
                    tires = get_tires_by_model_id(model_id)
                    
                    if tires:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏≤‡∏á
                        for tire in tires[:2]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 2 ‡∏£‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏ô tire object
                            tire['brand_name'] = brand_name
                            tire_flex = build_tire_flex(tire)
                            bubbles.append(tire_flex)
                            
                            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                            if len(bubbles) >= 12:
                                break
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                    if len(bubbles) >= 12:
                        break
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô
                        bubble = {
                            "type": "bubble",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": f"{brand_name} {model_name}",
                                        "weight": "bold",
                                        "size": "lg",
                                        "wrap": True,
                                        "color": "#0B4F6C"
                                    },
                                    {
                                        "type": "text",
                                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {model.get('tire_category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}",
                                        "size": "sm",
                                        "color": "#666666",
                                        "margin": "sm"
                                    },
                                    {
                                        "type": "text",
                                        "text": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                                        "size": "sm",
                                        "color": "#FF6B6B",
                                        "margin": "sm"
                                    }
                                ]
                            }
                        }
                        bubbles.append(bubble)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                if len(bubbles) > 12:
                    bubbles = bubbles[:12]
                carousel = {"type": "carousel", "contents": bubbles}
                
                line_bot_api.reply_message(
                    reply_token,
                    [
                        FlexSendMessage(
                            alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á",
                            contents=carousel
                        ),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                )
        # --- 4) ‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏ñ (‡∏™‡πà‡∏á‡πÑ‡∏õ Make) ---
        elif re.search(r"(‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞|‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞|‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á.*‡∏£‡∏ñ|‡∏¢‡∏≤‡∏á.*‡∏£‡∏ñ‡∏£‡∏∏‡πà‡∏ô)", text.lower()):
            try:
                make_answer = forward_to_make({
                    "replyToken": reply_token,
                    "userId": user_id,
                    "text": text,
                })
                if make_answer:
                    try:
                        line_bot_api.reply_message(
                            reply_token,
                            TextSendMessage(text=make_answer)
                        )
                    except Exception as reply_err:
                        print(f"‚ùå Failed to send reply: {reply_err}")
            except Exception as make_err:
                print("‚ùå Make error:", make_err)
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Make ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                try:
                    fallback_msg = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà ‚òéÔ∏è 044 611 097"
                    line_bot_api.reply_message(reply_token, TextSendMessage(text=fallback_msg))
                except Exception as fallback_err:
                    print(f"‚ùå Failed to send fallback message: {fallback_err}")
            return

        elif any(kw in text.lower() for kw in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢"]):
            set_user_mode(user_id, "menu")
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(
                    text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ",
                    quick_reply=build_quick_reply([
                        ("üöó ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                        ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                        ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                        ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                        ("üïó ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£"),
                    ]),
                ),
            )

        elif "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á" in text:
            set_user_mode(user_id, "menu")
            brands = get_all_tire_brands()
            if brands:
                labels = [b["brand_name"] for b in brands[:12]]
                bubble = build_selection_list_flex("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á", labels)
                line_bot_api.reply_message(
                    reply_token, 
                    [
                        FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", contents=bubble),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )

        elif "‡∏£‡∏∏‡πà‡∏ô" in text:
            set_user_mode(user_id, "menu")
            brands = get_all_tire_brands()
            all_models = []
            for b in brands:
                models = get_tire_models_by_brand_id(b["brand_id"])
                if models:
                    all_models.extend([m for m in models])

            if all_models:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                bubbles = []
                for model in all_models[:6]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 6 ‡∏£‡∏∏‡πà‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12 bubbles
                    brand_name = model.get('brand_name', '')
                    model_name = model.get('model_name', '')
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ
                    model_id = model.get("model_id")
                    tires = get_tires_by_model_id(model_id)
                    
                    if tires:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏≤‡∏á
                        for tire in tires[:2]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 2 ‡∏£‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏ô tire object
                            tire['brand_name'] = brand_name
                            tire_flex = build_tire_flex(tire)
                            bubbles.append(tire_flex)
                            
                            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                            if len(bubbles) >= 12:
                                break
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                    if len(bubbles) >= 12:
                        break
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô
                        bubble = {
                            "type": "bubble",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": f"{brand_name} {model_name}",
                                        "weight": "bold",
                                        "size": "lg",
                                        "wrap": True,
                                        "color": "#0B4F6C"
                                    },
                                    {
                                        "type": "text",
                                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {model.get('tire_category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}",
                                        "size": "sm",
                                        "color": "#666666",
                                        "margin": "sm"
                                    },
                                    {
                                        "type": "text",
                                        "text": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                                        "size": "sm",
                                        "color": "#FF6B6B",
                                        "margin": "sm"
                                    }
                                ]
                            }
                        }
                        bubbles.append(bubble)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                if len(bubbles) > 12:
                    bubbles = bubbles[:12]
                carousel = {"type": "carousel", "contents": bubbles}
                
                line_bot_api.reply_message(
                    reply_token,
                    [
                        FlexSendMessage(
                            alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á",
                            contents=carousel
                        ),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≤‡∏á)
        elif (category := get_services_by_category(text)):
            print(f"Debug - Found service category: '{text}' with {len(category)} services")
            print(f"Debug - Services: {[s['service_name'] for s in category]}")
            set_user_mode(user_id, "menu")
            flex_content = build_service_list_flex(text, category)
            flex_msg = FlexSendMessage(alt_text=f"‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î {text}", contents=flex_content)
            quick_buttons = [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")]
            quick_reply_msg = TextSendMessage(
                text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å",
                quick_reply=build_quick_reply_with_extra(quick_buttons),
            )
            line_bot_api.reply_message(reply_token, [flex_msg, quick_reply_msg])

        elif (brand := find_brand_in_text(text)):
            set_user_mode(user_id, "menu")
            models = get_tire_models_by_brand_id(brand["brand_id"])
            if models:
                labels = [m["model_name"] for m in models[:12]]
                bubble = build_selection_list_flex(f"üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á {brand['brand_name']}", labels)
                line_bot_api.reply_message(
                    reply_token, 
                    [
                        FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á", contents=bubble),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand['brand_name']} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )

        elif (model := get_tire_model_by_name(text)) or (model := find_model_in_text(text)) or (model := find_model_by_alias(text)):
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö
            print(f"Debug - Found model: {model}")
            print(f"Debug - Model name: {model.get('model_name', '')}")
            print(f"Debug - Brand name: {model.get('brand_name', '')}")
            print(f"Debug - User input: '{text}'")
            set_user_mode(user_id, "menu")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ
            model_id = model.get("model_id")
            model_name = model.get("model_name", "")
            tires = get_tires_by_model_id(model_id)
            
            print(f"Debug - Found {len(tires)} tires for model {model_name}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô
            if not tires:
                tires = get_tires_by_model_name(model_name)
                print(f"Debug - Found {len(tires)} tires by model name for {model_name}")
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ pagination system
            if tires:
                print(f"Debug - Using pagination system for {len(tires)} tires")
                user_pages[user_id] = {"page": 1, "model_id": model_id}
                send_tires_page(reply_token, user_id)
                return
            
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            if not tires:
                brand_name = model.get("brand_name", "")
                model_name = model.get("model_name", "")
                tire_category = model.get("tire_category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                sample_tires = create_sample_tires_for_model(model_name, brand_name, tire_category)
                
                if sample_tires:
                    # ‡πÉ‡∏ä‡πâ pagination system ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                    model_id = model.get("model_id")
                    user_pages[user_id] = {"page": 1, "model_id": model_id}
                    send_tires_page(reply_token, user_id)
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                    bubble = {
                        "type": "bubble",
                        "body": {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": f"{brand_name} {model_name}",
                                    "weight": "bold",
                                    "size": "xl",
                                    "wrap": True,
                                    "color": "#0B4F6C",
                                },
                                {"type": "separator", "margin": "md"},
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "margin": "md",
                                    "spacing": "sm",
                                    "contents": [
                                        {"type": "text", "text": f"‡∏´‡∏°‡∏ß‡∏î: {tire_category}"},
                                        {"type": "text", "text": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", "color": "#FF6B6B"},
                                        {"type": "text", "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "size": "sm", "color": "#666666"},
                                    ],
                                },
                            ],
                        },
                        "footer": {
                            "type": "box",
                            "layout": "vertical",
                            "spacing": "sm",
                            "contents": [
                                {
                                    "type": "button",
                                    "style": "link",
                                    "height": "sm",
                                    "action": {
                                        "type": "uri",
                                        "label": "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô",
                                        "uri": "tel:044611097"
                                    }
                                }
                            ]
                        }
                    }
                    
                    line_bot_api.reply_message(
                        reply_token,
                        [
                            FlexSendMessage(alt_text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô {model_name}", contents=bubble),
                            TextSendMessage(
                                text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                                quick_reply=build_quick_reply([
                                    ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                                    ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                    ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                                ])
                            )
                        ]
                    )
                return

        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        elif text == "Michelin":
            set_user_mode(user_id, "menu")
            carousel = build_michelin_model_flex()
            line_bot_api.reply_message(
                reply_token,
                [
                    FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Michelin", contents=carousel),
                    TextSendMessage(
                        text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        quick_reply=build_quick_reply([
                            ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                            ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                        ])
                    )
                ]
            )

        elif text == "BFGoodrich":
            set_user_mode(user_id, "menu")
            carousel = build_bfgoodrich_model_flex()
            line_bot_api.reply_message(
                reply_token,
                [
                    FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á BFGoodrich", contents=carousel),
                    TextSendMessage(
                        text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        quick_reply=build_quick_reply([
                            ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                            ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                        ])
                    )
                ]
            )

        elif text == "Maxxis":
            set_user_mode(user_id, "menu")
            carousel = build_maxxis_model_flex()
            line_bot_api.reply_message(
                reply_token,
                [
                    FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á Maxxis", contents=carousel),
                    TextSendMessage(
                        text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        quick_reply=build_quick_reply([
                            ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                            ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                        ])
                    )
                ]
            )

        else:
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ
            print(f"Debug - No model match found for: '{text}'")
            print(f"Debug - Text length: {len(text)}")
            print(f"Debug - Text type: {type(text)}")
            # ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
            similar_models = []
            all_brands = get_all_tire_brands()
            for b in all_brands:
                models = get_tire_models_by_brand_id(b["brand_id"])
                for m in models:
                    if text.lower() in m["model_name"].lower() or m["model_name"].lower() in text.lower():
                        similar_models.append(m)
            
            if similar_models:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
                bubbles = []
                for model in similar_models[:3]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 3 ‡∏£‡∏∏‡πà‡∏ô
                    brand_name = model.get('brand_name', '')
                    model_name = model.get('model_name', '')
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ
                    model_id = model.get("model_id")
                    tires = get_tires_by_model_id(model_id)
                    
                    if tires:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏≤‡∏á
                        for tire in tires[:2]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ 2 ‡∏£‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏ô tire object
                            tire['brand_name'] = brand_name
                            tire_flex = build_tire_flex(tire)
                            bubbles.append(tire_flex)
                            
                            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                            if len(bubbles) >= 12:
                                break
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 12
                    if len(bubbles) >= 12:
                        break
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô
                        bubble = {
                            "type": "bubble",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": f"{brand_name} {model_name}",
                                        "weight": "bold",
                                        "size": "lg",
                                        "wrap": True,
                                        "color": "#0B4F6C"
                                    },
                                    {
                                        "type": "text",
                                        "text": f"‡∏´‡∏°‡∏ß‡∏î: {model.get('tire_category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}",
                                        "size": "sm",
                                        "color": "#666666",
                                        "margin": "sm"
                                    },
                                    {
                                        "type": "text",
                                        "text": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                                        "size": "sm",
                                        "color": "#FF6B6B",
                                        "margin": "sm"
                                    }
                                ]
                            }
                        }
                        bubbles.append(bubble)
                
                if bubbles:
                    carousel = {"type": "carousel", "contents": bubbles}
                    line_bot_api.reply_message(
                        reply_token,
                        [
                            FlexSendMessage(
                                alt_text="‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô",
                                contents=carousel
                            ),
                            TextSendMessage(
                                text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                                quick_reply=build_quick_reply([
                                    ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                                    ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                    ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                                ])
                            )
                        ]
                    )
                else:
                    line_bot_api.reply_message(
                        reply_token,
                        TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                )

        if text.startswith("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠"):
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            brand_name = text.replace("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "")
            set_user_mode(user_id, "menu")
            models = get_tire_models_by_brand_id(brand_name)
            if models:
                labels = [m["model_name"] for m in models[:12]]
                bubble = build_selection_list_flex(f"üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á {brand_name}", labels)
                line_bot_api.reply_message(
                    reply_token, 
                    [
                        FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á", contents=bubble),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand_name} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )


        elif any(
            w in text
            for w in [
                "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô",
                "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà",
                "location",
                "‡∏û‡∏¥‡∏Å‡∏±‡∏î",
                "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô",
                "‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
                "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô",
                "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
                "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô",
            ]
        ):
            set_user_mode(user_id, "menu")
            line_bot_api.reply_message(
                reply_token,
                [
                    LocationSendMessage(
                        title="‡πÑ‡∏ó‡∏£‡πå‡∏û‡∏•‡∏±‡∏™ ‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡πÅ‡∏™‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏á",
                        address="365 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ñ‡∏ô‡∏ô ‡∏à‡∏¥‡∏£‡∏∞ ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå 31000",
                        latitude=14.9977752,
                        longitude=103.0387382,
                    ),
                    TextSendMessage(
                        text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                        quick_reply=build_quick_reply(
                            [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"), ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")]
                        ),
                    ),
                ],
            )

        elif text in ["‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"]:
            set_user_mode(user_id, "menu")
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(
                    text="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‚òéÔ∏è 044 611 097",
                    quick_reply=build_quick_reply(
                        [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"), ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")]
                    ),
                ),
            )

        elif any(word in text.lower() for word in ["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î"]):
            set_user_mode(user_id, "menu")
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(
                    text="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ üïó ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå : 08:00 - 17:30",
                    quick_reply=build_quick_reply(
                        [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"), ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")]
                    ),
                ),
            )

        elif text in ["‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô"]:
            set_user_mode(user_id, "free_text")
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(
                    text=(
                        "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô:\n"
                        "- ‡∏¢‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á\n"
                        "- ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô\n"
                        "- ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
                    ),
                    quick_reply=build_quick_reply_with_extra(
                        [
                            ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                            ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                            ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                            ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                            ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                        ]
                    ),
                ),
            )

        # --- 7) ‡πÄ‡∏°‡∏ô‡∏π "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô" ---
        elif "‡πÇ‡∏õ‡∏£" in text or "promotion" in text.lower() or "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô" in text:
            set_user_mode(user_id, "menu")
            promotions = get_active_promotions()
            if not promotions:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡πà‡∏∞"),
                )
            else:
                bubbles = [build_promotion_flex(p, i) for i, p in enumerate(promotions[:10])]
                carousel = {"type": "carousel", "contents": bubbles}
                line_bot_api.reply_message(
                    reply_token,
                    [
                        FlexSendMessage(alt_text="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", contents=carousel),
                        TextSendMessage(
                    text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                )
                    ]
                )

        # --- 8) ‡πÄ‡∏°‡∏ô‡∏π "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" ---
        elif "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" in text.lower() or "service" in text.lower():
            set_user_mode(user_id, "menu")
            service_categories = get_all_service_categories()
            print(f"Debug - Found {len(service_categories)} service categories: {[cat['category'] for cat in service_categories]}")
            if service_categories:
                bubble = build_selection_list_flex("üõ†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", [cat["category"] for cat in service_categories[:12]])
                line_bot_api.reply_message(
                    reply_token, 
                    [
                        FlexSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", contents=bubble),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
                )


        else:
            # Fallback: not matched any quick-reply flow ‚Üí remain silent
            print(f"Debug - No match found for text: '{text}', remaining silent")
            # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Make ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    except Exception as e:
        print("‚ùå ERROR:", e)
        try:
            line_bot_api.reply_message(
                reply_token,
                TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"),
            )
        except Exception as reply_error:
            print("‚ùå Failed to send error message:", reply_error)


@handler.add(PostbackEvent)
def handle_postback(event):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback events ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Flex Message"""
    postback_data = event.postback.data
    user_id = event.source.user_id
    
    print(f"üîî POSTBACK EVENT RECEIVED!")
    print(f"Postback data: {postback_data}")
    print(f"User ID: {user_id}")
    print(f"Event type: {type(event)}")
    print(f"Reply token: {event.reply_token}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if postback_data.startswith("model="):
        model_name = postback_data.replace("model=", "")
        print(f"User selected tire model: {model_name}")
        
        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            tire_list = get_tires_by_model_name(model_name)
            
            if tire_list and len(tire_list) > 0:
                # ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô list ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á
                tire_data = tire_list[0]
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
                model_info = get_tire_model_by_name(model_name)
                if model_info:
                    tire_data['model_name'] = model_info.get('model_name', model_name)
                    tire_data['brand_name'] = model_info.get('brand_name', '')
                    tire_data['tire_category'] = model_info.get('tire_category', '')
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤‡∏á
                flex_message = build_tire_flex(tire_data)
                
                line_bot_api.reply_message(
                    event.reply_token,
                    [
                        FlexSendMessage(alt_text=f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤‡∏á {model_name}", contents=flex_message),
                        TextSendMessage(
                            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                            quick_reply=build_quick_reply([
                                ("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                                ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                            ])
                        )
                    ]
                )
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô {model_name}")
                )
        except Exception as e:
            print(f"Error getting tire data: {e}")
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            )


@handler.add(MessageEvent, message=StickerMessage)
def handle_sticker(event):
    reply_token = event.reply_token
    user_id = event.source.user_id
    mode = user_pages.get(user_id, {}).get("mode", "menu")
    
    # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏ô‡∏π
    if mode == "free_text":
        set_user_mode(user_id, "menu")
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(
                text=(
                    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\n"
                    "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n"
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞üëá"
                ),
                quick_reply=build_quick_reply(
                    [
                        ("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                        ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                        ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                        ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                        ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                        ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"),
                    ]
                ),
            ),
        )
    else:
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(
                text=(
                    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\n"
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞üëá"
                ),
                quick_reply=build_quick_reply(
                    [
                        ("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                        ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                        ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                        ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                        ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                        ("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô", "‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"),
                    ]
                ),
            ),
        )


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))