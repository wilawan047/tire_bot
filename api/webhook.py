from flask import Flask, request, abort, jsonify, send_from_directory
import mysql.connector
import os
import sys
import config
from flask import url_for
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from make_integration import forward_to_make
from chatpdf_integration import forward_to_chatpdf
from werkzeug.utils import secure_filename
from urllib.parse import quote
from flask import send_from_directory
from urllib.parse import quote
import re
from db_queries import (
    get_active_promotions,
    get_all_tire_brands, get_tire_models_by_brand_id,
    get_tire_model_by_name, get_tires_by_model_id,
    get_all_service_categories, get_services_by_category
)
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction,
    FlexSendMessage, LocationSendMessage, StickerMessage
)
import config
LINE_CHANNEL_ACCESS_TOKEN = config.LINE_CHANNEL_ACCESS_TOKEN
LINE_CHANNEL_SECRET = config.LINE_CHANNEL_SECRET

app = Flask(__name__, static_folder="static")


line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
BASE_URL = os.getenv("BASE_URL", "http://localhost:5000")


user_pages = {}
@app.route("/api/webhook", methods=["POST"])
def callback():
    body = request.get_data(as_text=True)  # ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
    signature = request.headers.get("X-Line-Signature")
    print("Signature:", signature)
   
    if not signature:
        return "Missing signature", 400
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("‚ùå Invalid signature")
        return "Invalid signature", 401
    except Exception as e:
        print("Error:", e)
        return "Error", 500
    return "OK", 200




import os
from flask import send_from_directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
IMAGE_DIR = os.path.join(BASE_DIR, 'static', 'images2')

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö serve static images (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ LINE Flex ‡∏´‡∏£‡∏∑‡∏≠ browser ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ)
@app.route('/static/images2/<path:filename>')
def custom_static(filename):
    print("Serving:", os.path.join(IMAGE_DIR, filename))
    return send_from_directory(IMAGE_DIR, filename)

@app.route("/", methods=["GET", "POST"])
def home():
    return "LINE Bot Webhook is running!", 200


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô static/images2
def file_exists(filename):
    if not filename:
        return False
    return os.path.isfile(os.path.join("static/images2", filename))

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback
def get_image_url(filename):
    base_url = os.environ.get("BASE_URL", "").rstrip("/")
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô static/images2
    if not filename or not file_exists(filename):
        print(f"‚ùå File missing: {filename}, ‡πÉ‡∏ä‡πâ fallback image")
        # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ placeholder online ‡∏´‡∏£‡∏∑‡∏≠ default ‡πÉ‡∏ô static
        fallback_file = "default-tire.jpg"
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fallback file
        if not file_exists(fallback_file):
            return "https://via.placeholder.com/400x300?text=No+Image"
        filename = fallback_file

    # ‡∏ñ‡πâ‡∏≤ BASE_URL ‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ path relative ‡∏Ç‡∏≠‡∏á Flask (local testing)
    if not base_url:
        url = f"/static/images2/{quote(filename)}"
    else:
        url = f"{base_url}/static/images2/{quote(filename)}"
    
    print("URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á:", url)
    return url




def build_quick_reply_buttons(buttons):
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label=label, text=text))
        for label, text in buttons
    ])

def build_tire_flex(tire, model_name):
    image_url = get_image_url(tire.get("tire_image_url"))
    return {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": model_name or "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏∏‡πà‡∏ô", "weight": "bold", "size": "lg", "wrap": True},
                {"type": "separator", "margin": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "md",
                    "spacing": "sm",
                    "contents": [
                        {"type": "text", "text": f"‡∏Ç‡∏ô‡∏≤‡∏î: {tire.get('full_size') or '-'}"},
                        {"type": "text", "text": f"Load Index: {tire.get('load_index') or '-'}"},
                        {"type": "text", "text": f"Speed Symbol: {tire.get('speed_symbol') or '-'}"},
                        {"type": "text", "text": f"Ply Rating: {tire.get('ply_rating') or '-'}"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏™‡πâ‡∏ô: {tire.get('price_each') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏∏‡∏î: {tire.get('price_set') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üî• ‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: {tire.get('promotion_price') or '-'} ‡∏ö‡∏≤‡∏ó"}
                    ]
                }
            ]
        }
    }

def build_service_list_flex(category_name, services):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    service_items = []
    for service in services:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        options_text = service.get('options', '')
        service_contents = [
            {
                "type": "text",
                "text": service.get('service_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                "size": "sm",
                "weight": "bold",
                "wrap": True
            }
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if options_text:
            service_contents.append({
                "type": "text",
                "text": f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {options_text}",
                "size": "xs",
                "color": "#666666",
                "wrap": True
            })
        
        service_item = {
            "type": "box",
            "layout": "horizontal",
            "margin": "sm",
            "spacing": "sm",
            "contents": [
                {
                    "type": "text",
                    "text": "üîß",
                    "size": "sm",
                    "flex": 0
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "flex": 1,
                    "contents": service_contents
                }
            ]
        }
        service_items.append(service_item)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    return {
        "type": "bubble",
        "size": "giga",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": f"üõ†Ô∏è {category_name.upper()}",
                    "weight": "bold",
                    "size": "lg",
                    "color": "#FFFFFF"
                }
            ],
            "backgroundColor": "#3EEF68DA",
            "paddingAll": "md"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": service_items
        }
    }

import mysql.connector

def get_tire_model_name_by_id(model_id):
    try:
        conn = mysql.connector.connect(**config.DB_CONFIG) # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT model_name FROM tire_models WHERE model_id = %s", (model_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return result
        else:
            return {"model_name": "Unknown Model"}
    except Exception as e:
        print(f"Error in get_tire_model_name_by_id: {e}")
        return {"model_name": "Unknown Model"}
    
def build_promotion_flex(promo):
    image_url = get_image_url(promo.get('image_url')) # ‡∏î‡∏∂‡∏á URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    if not image_url or "http" not in image_url:
        image_url = "https://placeholder.vercel.app/images/default-promotion.jpg"
    
    return {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url, # ‡πÉ‡∏ä‡πâ URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": promo.get("title", "-"), "weight": "bold", "size": "lg", "wrap": True},
                {"type": "text", "text": promo.get("description", "-"), "size": "sm", "wrap": True, "margin": "md"},
                {"type": "text", "text": f"üìÖ {promo['start_date']} ‡∏ñ‡∏∂‡∏á {promo['end_date']}", "size": "xs", "color": "#888888", "margin": "md"}
            ]
        }
    }

def send_tires_page(reply_token, user_id):
    if user_id not in user_pages:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô"))
        return
    page_size = 10
    page = user_pages[user_id]['page']
    model_id = user_pages[user_id]['model_id']

    tires = get_tires_by_model_id(model_id)
    if not tires:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á"))
        return

    start = (page - 1) * page_size
    end = start + page_size
    tires_page = tires[start:end]

    tire_model = get_tire_model_name_by_id(model_id)
    model_name = tire_model.get('model_name', "Unknown Model")

    bubbles = [build_tire_flex(t, model_name) for t in tires_page]
    carousel = {"type": "carousel", "contents": bubbles}
    flex_msg = FlexSendMessage(alt_text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤ {page}", contents=carousel)

    nav_buttons = []
    if page > 1:
        nav_buttons.append(("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", f"page_{page - 1}"))
    if end < len(tires):
        nav_buttons.append(("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è", f"page_{page + 1}"))

    nav_buttons.extend([
        ("‚Ü©Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
        ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    ])

    line_bot_api.reply_message(reply_token, [
        flex_msg,
        TextSendMessage(text="üëá ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", quick_reply=build_quick_reply_buttons(nav_buttons))
    ])
# ======================
# üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
# ======================
def find_brand_in_text(text):
    text_lower = text.lower()
    brands = get_all_tire_brands()
    for b in brands:
        if b['brand_name'].lower() in text_lower:
            return b
    return None

# ======================
# üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
# ======================
def find_model_in_text(text):
    text_lower = text.lower()
    all_brands = get_all_tire_brands()
    for b in all_brands:
        models = get_tire_models_by_brand_id(b['brand_id'])
        for m in models:
            if m['model_name'].lower() in text_lower:
                return m
    return None




@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    reply_token = event.reply_token
    user_id = event.source.user_id

    try:
        # 1Ô∏è‚É£ ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        if any(word in text.lower() for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"]):
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏∞\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ üëá",
                quick_reply=build_quick_reply_buttons([
                    ("üöó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                    ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                    ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                    ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                    ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô")
                ])
            ))
        
        # 2Ô∏è‚É£ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
        elif text in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢","‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á"]:
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£üëá",
                quick_reply=build_quick_reply_buttons([
                    ("üöó ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                    ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                    ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                    ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                    ("üïó ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£")
                ])
            ))


        # 3Ô∏è‚É£ ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
        elif text == "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå":
            brands = get_all_tire_brands()
            if not brands:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á"))
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üîΩ",
                    quick_reply=build_quick_reply_buttons([
                        (b['brand_name'], b['brand_name']) for b in brands[:10]
                    ])
                ))

        # 4Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        elif "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ô‡∏î‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in text or "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in text or "‡∏°‡∏µ‡∏¢‡∏≤‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏≠‡∏∞‡πÑ‡∏£" in text:
            brands = get_all_tire_brands()
            if brands:
                brand_list = "\n".join([f"- {b['brand_name']}" for b in brands])
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"üìå ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô:\n{brand_list}"
                ))
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))

        # 5Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        elif "‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á" in text or "‡∏°‡∏µ‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£" in text:
            brands = get_all_tire_brands()
            all_models = []
            for b in brands:
                models = get_tire_models_by_brand_id(b['brand_id'])
                if models:
                    model_names = ", ".join([m['model_name'] for m in models])
                    all_models.append(f"{b['brand_name']}: {model_names}")
            if all_models:
                reply_text = "üìå ‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô:\n" + "\n".join(all_models)
                line_bot_api.reply_message(reply_token, TextSendMessage(text=reply_text))
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))

        # 6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô
        elif (brand := find_brand_in_text(text)):
            models = get_tire_models_by_brand_id(brand['brand_id'])
            if models:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á {brand['brand_name']} üîΩ",
                    quick_reply=build_quick_reply_buttons([
                        (m['model_name'], m['model_name']) for m in models[:13]
                    ])
                ))
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand['brand_name']} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))


        # 7Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô ‚Üí ‡πÅ‡∏™‡∏î‡∏á Flex
        elif (model := get_tire_model_by_name(text)) or (model := find_model_in_text(text)):
            tires = get_tires_by_model_id(model['model_id'])
            if tires:
                user_pages[user_id] = {'model_id': model['model_id'], 'page': 1}
                send_tires_page(reply_token, user_id)
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô {model['model_name']} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))

        # 8Ô∏è‚É£ ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏£‡πâ‡∏≤‡∏ô
        elif any(w in text for w in ["‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô", "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", "location", "‡∏û‡∏¥‡∏Å‡∏±‡∏î", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô", "‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô","‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"]):
            line_bot_api.reply_message(reply_token, LocationSendMessage(
                title="‡πÑ‡∏ó‡∏£‡πå‡∏û‡∏•‡∏±‡∏™ ‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡πÅ‡∏™‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏á",
                address="365 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ñ‡∏ô‡∏ô ‡∏à‡∏¥‡∏£‡∏∞ ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå 31000",
                latitude=14.9977752,
                longitude=103.0387382
            ))


        # 9Ô∏è‚É£ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ / ‡πÄ‡∏ß‡∏•‡∏≤
        elif text in ["‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"]:
            line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‚òéÔ∏è 044 611 097"))


        elif any(word in text.lower() for word in ["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î"]):
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ üïó ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå : 08:00 - 17:30"
            ))


        # üîü ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
        elif text in ["‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô", "‡πÇ‡∏õ‡∏£"]:
            promotions = get_active_promotions()
            if not promotions:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡πà‡∏∞"))
            else:
                bubbles = [build_promotion_flex(p) for p in promotions[:10]]
                carousel = {"type": "carousel", "contents": bubbles}
                flex_msg = FlexSendMessage(alt_text="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", contents=carousel)
                quick_buttons = [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")]
                quick_reply_msg = TextSendMessage(text="üëá", quick_reply=build_quick_reply_buttons(quick_buttons))
                line_bot_api.reply_message(reply_token, [flex_msg, quick_reply_msg])

        # 1Ô∏è‚É£1Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        elif text in ["‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "service", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]:
            categories = get_all_service_categories()
            if not categories:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞"))
            else:
                quick_buttons = [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")]
                quick_buttons.extend([(cat['category'], f"‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:{cat['category']}") for cat in categories])
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üîΩ",
                    quick_reply=build_quick_reply_buttons(quick_buttons)
                ))

        # 1Ô∏è‚É£2Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        elif text.startswith("‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:"):
            category_name = text.split(":", 1)[1]
            services = get_services_by_category(category_name)
            if not services:
                line_bot_api.reply_message(reply_token, TextSendMessage(text=f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {category_name}"))
            else:
                flex_content = build_service_list_flex(category_name, services)
                flex_msg = FlexSendMessage(alt_text=f"‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ {category_name}", contents=flex_content)
                quick_buttons = [
                    ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"), 
                    ("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                    ("üìã ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
                ]
                quick_reply_msg = TextSendMessage(
                    text="‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà rich menu ‡∏Ñ‡∏£‡∏±‡∏ö üìå",
                    quick_reply=build_quick_reply_buttons(quick_buttons)
                )
                line_bot_api.reply_message(reply_token, [flex_msg, quick_reply_msg])

        # 1Ô∏è‚É£3Ô∏è‚É£ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ ChatPDF ‚Üí Make
        else:
            raise Exception("‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")

    except Exception as e:
        print("‚ùóÔ∏è‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ñ‡∏≤‡∏° ChatPDF:", e)
        try:
            answer = forward_to_chatpdf({
                "replyToken": reply_token,
                "userId": user_id,
                "text": text
            })
            line_bot_api.reply_message(reply_token, TextSendMessage(text=answer))
        except Exception as chatpdf_err:
            print("‚ùå ChatPDF error ‚Üí fallback ‡πÑ‡∏õ Make:", chatpdf_err)
            try:
                forward_to_make({
                    "replyToken": reply_token,
                    "userId": user_id,
                    "text": text
                })
            except Exception as make_err:
                print("‚ùå Make ‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", make_err)
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòÖ"
                ))


@handler.add(MessageEvent, message=StickerMessage)
def handle_sticker(event):
    reply_token = event.reply_token
    line_bot_api.reply_message(reply_token, TextSendMessage(
        text="‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞üëá",
        quick_reply=build_quick_reply_buttons([
            ("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
            ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
            ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
            ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
            ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô")
        ])
    ))
    
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
