from flask import Flask, request, abort, jsonify, send_from_directory
import mysql.connector
import os
from make_integration import forward_to_make
from chatpdf_integration import forward_to_chatpdf
from werkzeug.utils import secure_filename
from urllib.parse import quote
import re
from db_queries import (
    get_active_promotions,
    get_all_tire_brands, get_tire_models_by_brand_id,
    get_tire_model_by_name, get_tires_by_model_id,
    get_all_service_categories, get_services_by_category
)
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction,
    FlexSendMessage, LocationSendMessage, StickerMessage
)
# 1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Environment Variables ‡πÅ‡∏ó‡∏ô‡πÑ‡∏ü‡∏•‡πå config.py
# LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
# LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡πÅ‡∏•‡∏∞ LINE_CHANNEL_SECRET
if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    print("Error: LINE_CHANNEL_ACCESS_TOKEN or LINE_CHANNEL_SECRET is not set.")
    # You might want to handle this more gracefully depending on your use case
    # For now, we'll let it raise an error if not set.
app = Flask(__name__)

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

user_pages = {}
@app.route("/", methods=["GET"])
def home():
    return "LINE Bot Webhook is running!", 200

@app.route("/images/<path:filename>")
def serve_image(filename):
    return send_from_directory("static/images", filename)

def get_image_url(filename):
    base_url = BASE_URL = os.environ.get("BASE_URL", "https://your-vercel-project.vercel.app/images/")
    if filename:
        return base_url + quote(filename)
    return BASE_URL + "default-tire.jpg"

def build_quick_reply_buttons(buttons):
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label=label, text=text))
        for label, text in buttons
    ])

def build_tire_flex(tire, model_name):
    image_url = get_image_url(tire.get("tire_image_url"))
    return {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": model_name or "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏∏‡πà‡∏ô", "weight": "bold", "size": "lg", "wrap": True},
                {"type": "separator", "margin": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "md",
                    "spacing": "sm",
                    "contents": [
                        {"type": "text", "text": f"‡∏Ç‡∏ô‡∏≤‡∏î: {tire.get('full_size') or '-'}"},
                        {"type": "text", "text": f"Load Index: {tire.get('load_index') or '-'}"},
                        {"type": "text", "text": f"Speed Symbol: {tire.get('speed_symbol') or '-'}"},
                        {"type": "text", "text": f"Ply Rating: {tire.get('ply_rating') or '-'}"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏™‡πâ‡∏ô: {tire.get('price_each') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏∏‡∏î: {tire.get('price_set') or '-'} ‡∏ö‡∏≤‡∏ó"},
                        {"type": "text", "text": f"üî• ‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: {tire.get('promotion_price') or '-'} ‡∏ö‡∏≤‡∏ó"}
                    ]
                }
            ]
        }
    }

def build_service_list_flex(category_name, services):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    service_items = []
    for service in services:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        options_text = service.get('options', '')
        service_contents = [
            {
                "type": "text",
                "text": service.get('service_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                "size": "sm",
                "weight": "bold",
                "wrap": True
            }
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if options_text:
            service_contents.append({
                "type": "text",
                "text": f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {options_text}",
                "size": "xs",
                "color": "#666666",
                "wrap": True
            })
        
        service_item = {
            "type": "box",
            "layout": "horizontal",
            "margin": "sm",
            "spacing": "sm",
            "contents": [
                {
                    "type": "text",
                    "text": "üîß",
                    "size": "sm",
                    "flex": 0
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "flex": 1,
                    "contents": service_contents
                }
            ]
        }
        service_items.append(service_item)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    return {
        "type": "bubble",
        "size": "giga",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": f"üõ†Ô∏è {category_name.upper()}",
                    "weight": "bold",
                    "size": "lg",
                    "color": "#FFFFFF"
                }
            ],
            "backgroundColor": "#4A90E2",
            "paddingAll": "md"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": service_items
        }
    }

def get_tire_model_name_by_id(model_id):
    try:
        import config
        conn = mysql.connector.connect(**config.DB_CONFIG)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT model_name FROM tire_models WHERE model_id = %s", (model_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return result
        else:
            return {"model_name": "Unknown Model"}
    except Exception as e:
        print(f"Error in get_tire_model_name_by_id: {e}")
        return {"model_name": "Unknown Model"}

def build_promotion_flex(promo):
    image_url = get_image_url(promo.get('image_url'))
    return {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": image_url,
            "size": "full",
            "aspectRatio": "4:3",
            "aspectMode": "fit"
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": promo.get("title", "-"), "weight": "bold", "size": "lg", "wrap": True},
                {"type": "text", "text": promo.get("description", "-"), "size": "sm", "wrap": True, "margin": "md"},
                {"type": "text", "text": f"üìÖ {promo['start_date']} ‡∏ñ‡∏∂‡∏á {promo['end_date']}", "size": "xs", "color": "#888888", "margin": "md"}
            ]
        }
    }

def send_tires_page(reply_token, user_id):
    if user_id not in user_pages:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô"))
        return
    page_size = 10
    page = user_pages[user_id]['page']
    model_id = user_pages[user_id]['model_id']

    tires = get_tires_by_model_id(model_id)
    if not tires:
        line_bot_api.reply_message(reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á"))
        return

    start = (page - 1) * page_size
    end = start + page_size
    tires_page = tires[start:end]

    tire_model = get_tire_model_name_by_id(model_id)
    model_name = tire_model.get('model_name', "Unknown Model")

    bubbles = [build_tire_flex(t, model_name) for t in tires_page]
    carousel = {"type": "carousel", "contents": bubbles}
    flex_msg = FlexSendMessage(alt_text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤ {page}", contents=carousel)

    nav_buttons = []
    if page > 1:
        nav_buttons.append(("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", f"page_{page - 1}"))
    if end < len(tires):
        nav_buttons.append(("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è", f"page_{page + 1}"))

    nav_buttons.extend([
        ("‚Ü©Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
        ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    ])

    line_bot_api.reply_message(reply_token, [
        flex_msg,
        TextSendMessage(text="üëá ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", quick_reply=build_quick_reply_buttons(nav_buttons))
    ])

@app.route("/api/webhook", methods=["POST"])
def callback():
    body = request.get_data(as_text=True)
    signature = request.headers.get("X-Line-Signature")
    if not signature:
        abort(400)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    except Exception as e:
        print("General exception:", e)
        abort(500)
    return "OK"

@app.route("/api/webhook", methods=["GET"])
def index():
    return "LINE Webhook is working!", 200

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    reply_token = event.reply_token
    user_id = event.source.user_id

    try:
        # ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        if any(word in text.lower() for word in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"]):
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏∞\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ üëá",
                quick_reply=build_quick_reply_buttons([
                    ("üöó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
                    ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                    ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                    ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
                    ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô")
                ])
            ))
            return

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
        if text in ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤‡∏á", "‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢"]:
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£üëá",
                quick_reply=build_quick_reply_buttons([
                    ("üöó ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"),
                    ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                    ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
                    ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"),
                    ("üïó ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£")
                ])
            ))
            return

        # ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
        if text == "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå":
            brands = get_all_tire_brands()
            if not brands:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏á"))
                return
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üîΩ",
                quick_reply=build_quick_reply_buttons([
                    (b['brand_name'], b['brand_name']) for b in brands[:10]
                ])
            ))
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô
        brand = next((b for b in get_all_tire_brands() if b['brand_name'].lower() == text.lower()), None)
        if brand:
            models = get_tire_models_by_brand_id(brand['brand_id'])
            if models:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≤‡∏á‡∏Ç‡∏≠‡∏á {brand['brand_name']} üîΩ",
                    quick_reply=build_quick_reply_buttons([
                        (m['model_name'], m['model_name']) for m in models[:13]
                    ])
                ))
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand['brand_name']} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô ‚Üí ‡πÅ‡∏™‡∏î‡∏á Flex
        model = get_tire_model_by_name(text)
        if model:
            tires = get_tires_by_model_id(model['model_id'])
            if tires:
                user_pages[user_id] = {'model_id': model['model_id'], 'page': 1}
                send_tires_page(reply_token, user_id)
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text=f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô {model['model_name']} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                ))
            return

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Flex
        if text.startswith("page_"):
            page = int(text.split("_")[1])
            if user_id in user_pages:
                user_pages[user_id]['page'] = page
                send_tires_page(reply_token, user_id)
            else:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô"))
            return

        # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏£‡πâ‡∏≤‡∏ô
        if any(w in text for w in ["‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô", "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", "location", "‡∏û‡∏¥‡∏Å‡∏±‡∏î", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô", "‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"]):
            line_bot_api.reply_message(reply_token, LocationSendMessage(
                title="‡πÑ‡∏ó‡∏£‡πå‡∏û‡∏•‡∏±‡∏™ ‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡πÅ‡∏™‡∏á‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏á",
                address="365 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ñ‡∏ô‡∏ô ‡∏à‡∏¥‡∏£‡∏∞ ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå 31000",
                latitude=14.9977752,
                longitude=103.0387382
            ))
            return

        # ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ / ‡πÄ‡∏ß‡∏•‡∏≤
        if text == "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô":
            line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‚òéÔ∏è 044 611 097"))
            return

        if any(word in text.lower() for word in ["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", "‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î"]):
            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ üïó ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå : 08:00 - 17:30"
            ))
            return

        # ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
        if text in ["‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô", "‡πÇ‡∏õ‡∏£"]:
            promotions = get_active_promotions()
            if not promotions:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡πà‡∏∞"))
                return

            bubbles = [build_promotion_flex(p) for p in promotions[:10]]
            carousel = {"type": "carousel", "contents": bubbles}
            flex_msg = FlexSendMessage(alt_text="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", contents=carousel)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            quick_buttons = [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")]
            quick_reply_msg = TextSendMessage(text="üëá", quick_reply=build_quick_reply_buttons(quick_buttons))
            
            # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á Flex Message ‡πÅ‡∏•‡∏∞ Quick Reply ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            line_bot_api.reply_message(reply_token, [flex_msg, quick_reply_msg])
            return

        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        if text in ["‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "service", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]:
            categories = get_all_service_categories()
            if not categories:
                line_bot_api.reply_message(reply_token, TextSendMessage(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞"))
                return

            quick_buttons = [("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")]
            quick_buttons.extend([(cat['category'], f"‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:{cat['category']}") for cat in categories])

            line_bot_api.reply_message(reply_token, TextSendMessage(
                text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üîΩ",
                quick_reply=build_quick_reply_buttons(quick_buttons)
            ))
            return

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        if text.startswith("‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:"):
            category_name = text.split(":", 1)[1]
            services = get_services_by_category(category_name)
            if not services:
                line_bot_api.reply_message(reply_token, TextSendMessage(text=f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {category_name}"))
                return

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
            flex_content = build_service_list_flex(category_name, services)
            flex_msg = FlexSendMessage(alt_text=f"‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ {category_name}", contents=flex_content)
            
            # Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
            quick_buttons = [
                ("üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"), 
                ("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
                ("üìã ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
            ]
            quick_reply_msg = TextSendMessage(
                text="‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà rich menu ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° üìå",
                quick_reply=build_quick_reply_buttons(quick_buttons)
            )
            
            # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á Flex Message ‡πÅ‡∏•‡∏∞ Quick Reply
            line_bot_api.reply_message(reply_token, [flex_msg, quick_reply_msg])
            return

        # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ChatPDF ‚Üí Make
        raise Exception("‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")

    except Exception as e:
        print("‚ùóÔ∏è‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ñ‡∏≤‡∏° ChatPDF:", e)
        try:
            answer = forward_to_chatpdf({
                "replyToken": reply_token,
                "userId": user_id,
                "text": text
            })
            line_bot_api.reply_message(reply_token, TextSendMessage(text=answer))
        except Exception as chatpdf_err:
            print("‚ùå ChatPDF error ‚Üí fallback ‡πÑ‡∏õ Make:", chatpdf_err)
            try:
                forward_to_make({
                    "replyToken": reply_token,
                    "userId": user_id,
                    "text": text
                })
            except Exception as make_err:
                print("‚ùå Make ‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", make_err)
                line_bot_api.reply_message(reply_token, TextSendMessage(
                    text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòÖ"
                ))
                pass

@handler.add(MessageEvent, message=StickerMessage)
def handle_sticker(event):
    reply_token = event.reply_token
    line_bot_api.reply_message(reply_token, TextSendMessage(
        text="‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞üëá",
        quick_reply=build_quick_reply_buttons([
            ("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏á", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
            ("üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"),
            ("üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"),
            ("üìç ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô"),
            ("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô")
        ])
    ))






if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
